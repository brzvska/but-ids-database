-----------------------------------------------------------------------
--IDS (Database Systems) task 3.
--Authors: Berezovskaia Anastasiia (xberez04), Holáň Patrik (xholan10).
-----------------------------------------------------------------------

DROP TABLE complaint;
DROP TABLE productOrder;
DROP TABLE employee;
DROP TABLE customer;
DROP TABLE username;
DROP TABLE product;
DROP TABLE category;
DROP TABLE contains;


CREATE TABLE username
(
    usernameID          INT GENERATED BY DEFAULT AS IDENTITY,
    name                VARCHAR2(255) NOT NULL,
    lastname            VARCHAR2(255) NOT NULL,
    phoneNumber         CHAR(13) NOT NULL,
    email               VARCHAR2(255) NOT NULL,
    address             VARCHAR2(255) NOT NULL,

    check (REGEXP_LIKE(phoneNumber, '^\+420\d{9}$'))
);

CREATE TABLE employee
(
    usernameID          INT NOT NULL,
    employeeID          INT GENERATED BY DEFAULT AS IDENTITY,
    dateOfBirth         DATE NOT NULL,
    --Rodné číslo.
    nationalIdNumber    INT NOT NULL,
    insurance           NUMBER(3) NOT NULL,
    startDate           DATE NOT NULL,
    finishDate          DATE,
    position            VARCHAR2(255) NOT NULL,
    salary              NUMBER(6) NOT NULL,
    accountNumber       VARCHAR2(18) NOT NULL,

    CHECK(MOD(nationalIdNumber, 11) = 0)     --if birth number is divisible by 11 -> it is valid.
);

CREATE TABLE customer
(
    usernameID          INT NOT NULL,
    customerID          INT GENERATED BY DEFAULT AS IDENTITY,
    login               VARCHAR2(255) NOT NULL,
    password            VARCHAR2(255) NOT NULL
);

CREATE TABLE complaint
(
    complaintNumber     INT GENERATED BY DEFAULT AS IDENTITY,
    productID           NUMBER(6) NOT NULL,
    description         VARCHAR2(255) NOT NULL,
    submissionDate      DATE NOT NULL,
    executionDate       DATE NOT NULL,
    state               VARCHAR2(255) NOT NULL,
    orderNumber         INT NOT NULL,
    employeeID          INT NOT NULL,
    customerID          INT NOT NULL
);

CREATE TABLE productOrder
(
    orderNumber         NUMBER GENERATED BY DEFAULT AS IDENTITY,
    orderDate           DATE NOT NULL,
    totalPrice          DECIMAL(8, 2) NOT NULL,
    address             VARCHAR2(255) NOT NULL,
    delivery            VARCHAR2(255) NOT NULL,
    payment             VARCHAR2(255) NOT NULL,
    productID           INT NOT NULL,
    employeeID          INT NOT NULL,
    customerID          INT NOT NULL
);

CREATE TABLE product
(
    productID          INT GENERATED BY DEFAULT AS IDENTITY,
    productName        VARCHAR2(255) NOT NULL,
    price              DECIMAL(8,2) NOT NULL,
    description        VARCHAR2(255) NOT NULL,
    inStock            NUMBER(6) NOT NULL,
    categoryID         INT NOT NULL
);

CREATE TABLE category
(
    categoryID        INT GENERATED BY DEFAULT AS IDENTITY,
    categoryName      VARCHAR2(255) NOT NULL
);


-- Link table contains -> product; product -> order.
CREATE TABLE contains
(
    orderNumber    NUMBER NOT NULL,
    productID      NUMBER NOT NULL,
    quantity       NUMBER NOT NULL
);


---------------------------------------------------------------------- PRIMARY KEYS --------------------------------------------------------------------------------------------
ALTER TABLE username ADD CONSTRAINT PK_username PRIMARY KEY(usernameID);
ALTER TABLE employee ADD CONSTRAINT PK_employee PRIMARY KEY(employeeID);
ALTER TABLE customer ADD CONSTRAINT PK_customer PRIMARY KEY(customerID);
ALTER TABLE complaint ADD CONSTRAINT PK_complaint PRIMARY KEY(complaintNumber);
ALTER TABLE productOrder ADD CONSTRAINT PK_productOrder PRIMARY KEY(orderNumber);
ALTER TABLE product ADD CONSTRAINT PK_product PRIMARY KEY(productID);
ALTER TABLE category ADD CONSTRAINT PK_category PRIMARY KEY(categoryID);


---------------------------------------------------------------------- FOREIGN KEYS --------------------------------------------------------------------------------------------
ALTER TABLE customer ADD CONSTRAINT FK_customer_username FOREIGN KEY(usernameID) REFERENCES username;
ALTER TABLE employee ADD CONSTRAINT FK_employee_username FOREIGN KEY(usernameID) REFERENCES username;
ALTER TABLE complaint ADD CONSTRAINT FK_complaint_employee FOREIGN KEY(employeeID) REFERENCES employee;
ALTER TABLE complaint ADD CONSTRAINT FK_complaint_customer FOREIGN KEY(customerID) REFERENCES customer;
ALTER TABLE productOrder ADD CONSTRAINT FK_productOrder_customer FOREIGN KEY(customerID) REFERENCES customer;
ALTER TABLE productOrder ADD CONSTRAINT FK_productOrder_employee FOREIGN KEY(employeeID) REFERENCES employee;
ALTER TABLE complaint ADD CONSTRAINT FK_complaint_productOrder FOREIGN KEY(orderNumber) REFERENCES productOrder;
ALTER TABLE productOrder ADD CONSTRAINT FK_productOrder_product FOREIGN KEY(productID) REFERENCES product;
ALTER TABLE product ADD CONSTRAINT FK_product_category FOREIGN KEY(categoryID) REFERENCES category;


---------------------------------------------------------------------- INSERT DATA ---------------------------------------------------------------------------------------------
INSERT INTO username (name, lastname, phoneNumber, email, address) VALUES ('Jan', 'Novotný', '+420765455854', 'novotny@seznam.cz', 'Purkynova 587, 612 00 Brno');
INSERT INTO username (name, lastname, phoneNumber, email, address) VALUES ('Katerina', 'Veselá', '+420785442223', 'kate@seznam.cz', 'Olomoucká 998, 787 01 Šumperk');
INSERT INTO username (name, lastname, phoneNumber, email, address) VALUES ('David', 'Horák', '+420458265452', 'davidhorak@centrum.cz', 'Mojmírova 144/14, 100 00 Praha');
INSERT INTO username (name, lastname, phoneNumber, email, address) VALUES ('Hana', 'Buchtíková', '+420785412564', 'buchtikova@gmail.com', 'Na Dolinách 555, 301 00 Plzeň');
INSERT INTO username (name, lastname, phoneNumber, email, address) VALUES ('Monika', 'Valášková', '+420854663247', 'valmon@gmail.com', 'Lumírova 478, 760 01 Zlín');
INSERT INTO username (name, lastname, phoneNumber, email, address) VALUES ('Josef', 'Dvořák', '+420754125445', 'josdvor@seznam.cz', 'Hradní 160, 690 02 Břeclav');
INSERT INTO username (name, lastname, phoneNumber, email, address) VALUES ('Jan', 'Palacký', '+420763455858', 'palac@gmail.com', 'Palackého třída 144, 612 00 Brnov');
INSERT INTO username (name, lastname, phoneNumber, email, address) VALUES ('Tomáš', 'Srbský', '+420142547999', 'tomass@seznam.cz', 'Bratislavská 2A, 602 00 Brno');
INSERT INTO username (name, lastname, phoneNumber, email, address) VALUES ('Sofia', 'Logmanová', '+420333948260', 'sofialog@seznam.cz', 'Vodná 3, 638 00 Brno');
INSERT INTO username (name, lastname, phoneNumber, email, address) VALUES ('František', 'Novák', '+420765454245', 'frant@gmail.com', 'Kolejní 2, 612 00 Brno');


INSERT INTO employee (usernameID, dateOfBirth, nationalIdNumber, insurance, startDate, finishDate, position, salary, accountNumber)
    VALUES (1, '05-08-1968', 6808051899, 211, '09-10-2010', null, 'prodavač', 24000, '217375089/0600');

INSERT INTO employee (usernameID, dateOfBirth, nationalIdNumber, insurance, startDate, finishDate, position, salary, accountNumber)
    VALUES (2, '08-04-1998', 9854089905, 201, '15-05-2019', null, 'účetní', 35000, '35-1319001257/0100');

INSERT INTO employee (usernameID, dateOfBirth, nationalIdNumber, insurance, startDate, finishDate, position, salary, accountNumber)
    VALUES (3, '30-07-1977', 7707303978, 211, '10-10-2020', null, 'prodavač', 26000, '300200232/0800');


INSERT INTO category (categoryName) VALUES ('Chytré hodinky');
INSERT INTO category (categoryName) VALUES ('Mobilní telefony');
INSERT INTO category (categoryName) VALUES ('Počítače a notebooky');
INSERT INTO category (categoryName) VALUES ('Televize');
INSERT INTO category (categoryName) VALUES ('Monitory');


INSERT INTO product (productName, price, description, inStock, categoryID) 
    VALUES ('Xiaomi Redmi Note 11 128GB šedá', 5799.90, '6.43" AMOLED 2400 x 1080, 90HZ, procesor Qualcomm Snapdragon 680 8 jádrový, RAM 4 GB', 20, 2);
    
INSERT INTO product (productName, price, description, inStock, categoryID) 
    VALUES ('27" MSI Optix MAG272CQR', 8990.40, 'LCD monitor prohnutý, Quad HD 2560 × 1440, VA, 16:9, 1 ms, 165Hz', 10, 5);
    
INSERT INTO product (productName, price, description, inStock, categoryID) 
    VALUES ('Lenovo Legion 5-17ACH6H Phantom Blue', 35989.50, 'Herní notebook - AMD Ryzen 7 5800H, 17.3" IPS antireflexní 1920 × 1080 144Hz, RAM 16GB DDR4', 14, 3);
    
INSERT INTO product (productName, price, description, inStock, categoryID) 
    VALUES ('65" LG 65UP7700', 14990.50, 'Televize SMART LED, 164cm, 4K Ultra HD, 50Hz, Direct LED, HDR10, HLG, DVB-T2/S2/C, H.265/HEVC, 2× HDMI, 1× USB', 15, 4); 
    
INSERT INTO product (productName, price, description, inStock, categoryID) 
    VALUES ('Samsung Galaxy Watch 4 Classic 46mm černé', 9990.90, 'Chytré hodinky s ovládáním v češtině, GPS, NFC platby skrze Google Pay', 30, 1);

INSERT INTO product (productName, price, description, inStock, categoryID) 
    VALUES ('iPhone 13 Pro 128GB grafitově šedá', 28990.90, '6,1" OLED 2532 × 1170, 120Hz, procesor Apple A15 Bionic 6jádrový, RAM 6 GB', 25, 2);

INSERT INTO product (productName, price, description, inStock, categoryID) 
    VALUES ('Lenovo IdeaPad 5 Pro 16ACH6 Cloud Grey kovový', 23690.50, 'AMD Ryzen 7 5800H, 16" IPS antireflexní 2560 × 1600 , RAM 16GB DDR4', 5, 3);

INSERT INTO product (productName, price, description, inStock, categoryID) 
    VALUES ('HP 250 G8 Dark Ash', 9990.90, 'Intel Core i3 1115G4 Tiger Lake, 15.6" VA antireflexní 1920 × 1080, RAM 8GB DDR4', 12, 3);
    
INSERT INTO product (productName, price, description, inStock, categoryID) 
    VALUES ('Samsung Galaxy A53 5G 128GB černá', 11499.40, '6,5" AMOLED 2400 × 1080, 120Hz, procesor Samsung Exynos 1280 8jádrový, RAM 6 GB', 20, 2);
    
    
INSERT INTO customer (usernameID, login, password) VALUES (4, 'xbucht12', 'mypasswd15#');
INSERT INTO customer (usernameID, login, password) VALUES (5, 'xvalas01', 'xsd44asd');
INSERT INTO customer (usernameID, login, password) VALUES (6, 'xdvora05', '15sdf546');
INSERT INTO customer (usernameID, login, password) VALUES (7, 'xpalac05', '15sd=!pf@f');
INSERT INTO customer (usernameID, login, password) VALUES (8, 'xsrbsk53', 'hJDak-)23');
INSERT INTO customer (usernameID, login, password) VALUES (9, 'xlogma00', '9302-5BBwejf');
INSERT INTO customer (usernameID, login, password) VALUES (10, 'xnovot19', 'gfgh!5BBfgdsf');

    
INSERT INTO productOrder (orderDate, totalPrice, address, delivery, payment, productID, employeeID, customerID) 
    VALUES ('25-06-2021', 29090.50, 'Hradní 160, 690 02 Břeclav', 'Česká pošta', 'kartou', 6, 3, 3);  
    
INSERT INTO productOrder (orderDate, totalPrice, address, delivery, payment, productID, employeeID, customerID) 
    VALUES ('28-1-2018', 9090.00, 'Kolejní 2, 612 00 Brno', 'PPL', 'při převzetí', 2, 1, 7);   
    
INSERT INTO productOrder (orderDate, totalPrice, address, delivery, payment, productID, employeeID, customerID) 
    VALUES ('14-9-2015', 15090.90, 'Vodná 3, 638 00 Brno', 'Česká pošta', 'při převzetí', 4, 1, 6);
    
INSERT INTO productOrder (orderDate, totalPrice, address, delivery, payment, productID, employeeID, customerID) 
    VALUES ('18-6-2021', 36089.50, 'Bratislavská 2A, 602 00 Brno', 'DHL', 'kartou', 3, 3, 5);
    
INSERT INTO productOrder (orderDate, totalPrice, address, delivery, payment, productID, employeeID, customerID) 
    VALUES ('02-03-2021', 11599.40, 'Lumírova 478, 760 01 Zlín', 'PPL', 'bankovním převodem', 9, 3, 2);
    
INSERT INTO productOrder (orderDate, totalPrice, address, delivery, payment, productID, employeeID, customerID) 
    VALUES ('04-08-2019', 10090.90, 'Na Dolinách 555, 301 00 Plzeň', 'DHL', 'kartou', 8, 1, 1);
    
    
INSERT INTO complaint (productID, description, submissionDate, executionDate, state, orderNumber, employeeID, customerID) 
    VALUES (6, 'zařízení nelze zapnout', '01-07-2021', '01-08-2021', 'vyřízeno', 1, 1, 3);
    
INSERT INTO complaint (productID, description, submissionDate, executionDate, state, orderNumber, employeeID, customerID) 
    VALUES (4, 've středu obrazovky se objevil svislý pruh', '16-07-2016', '16-08-2016', 'vyřízeno', 3, 3, 6);
    
INSERT INTO complaint (productID, description, submissionDate, executionDate, state, orderNumber, employeeID, customerID) 
    VALUES (8, 'nefunkční webkamera', '05-08-2019', '05-09-2019', 'vyřízeno', 6, 3, 1);
    
    
INSERT INTO contains VALUES (1, 6, 1);
INSERT INTO contains VALUES (2, 2, 1);
INSERT INTO contains VALUES (3, 4, 1);


---------------------------------------------------------------------------- QUERIES -----------------------------------------------------------------------------------------------------
SELECT SUM(inStock) PC_in_stock FROM category c NATURAL JOIN product WHERE c.categoryname = 'Počítače a notebooky'; 
            --- vypise celkovy pocet zbozi z kategorie "Pocitace a notebooky" na sklade

SELECT login FROM customer NATURAL JOIN productOrder WHERE payment = 'kartou' AND orderDate BETWEEN TO_DATE('01-01-2021') AND TO_DATE('31-12-2021');
            --- vypise login zakazniku, kteri v roce 2021 platili za objednavku kartou

SELECT lastname, name, count(*) complaints_finished FROM username NATURAL JOIN employee NATURAL JOIN complaint GROUP BY lastname, name; 
            --- zobrazi jmena prodavacu, kteri vyrizovali nejakou reklamaci a vypise pocet reklamaci, ktery kazdy zamestnanec vyridil

SELECT categoryname, SUM(inStock) in_stock FROM category NATURAL JOIN product GROUP BY categoryname ORDER BY SUM(inStock) DESC;
            --- vypise celkovy pocet produktu v jednotlivych kategoriich skladem, serazenych od nejvetsiho poctu skladem po nejmensi

SELECT productID, productName FROM product WHERE NOT EXISTS (SELECT * FROM complaint where product.productID = complaint.productID); 
            --- vypise ID a nazev produktu, ktery nebyl nikdy reklamovan

SELECT lastname, name, email FROM username NATURAL JOIN customer WHERE customerID IN (SELECT customerID FROM productOrder WHERE totalPrice >= 15000.00); 
            --- vypise prijmeni, jmeno, email zakazniku, kteri si objednali zbozi za vice jak 15 000